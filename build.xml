<project name="streamsx.inet" default="all" basedir=".">
    <description>
        Build file for streamsx.inet project, built the toolkits and samples.
    </description>
  <!-- set global properties for this build -->
  <property environment="env" />
  <property name="streams.install" value="${env.STREAMS_INSTALL}" />
  <property name="toolkit" location="com.ibm.streamsx.inet"/>
  <property name="toolkit.test" location="tests" />
  <property name="release.dir" location="release" />
  <property name="release.info.file"  value="${toolkit}/build.info"/>
  <property name="spl-md"  value="${env.STREAMS_INSTALL}/bin/spl-make-doc" />
  <property name="spl-st"  value="${env.STREAMS_INSTALL}/bin/streamtool" />

  <!-- Create the time stamp -->
  <tstamp/>

  <target name="all"
    description="Build the toolkit code, build the samples index and generate the spl documentation"
    depends="setcommitversion, toolkit, samples, spldoc_work"
  />

  <target name="setcommitversion">
    <!-- Extract the git commit hash -->
    <exec executable="git" outputproperty="commithash">
        <arg value="rev-parse"/>
        <arg value="--short"/>
        <arg value="HEAD"/>
    </exec>
    <!-- Update the info.xml -->
    <replace file="${toolkit}/info.xml" token="__dev__" value="commit_${commithash}" summary="yes"/>
    <!-- Extract info from the toolkit's info.xml -->
    <xmlproperty file="${toolkit}/info.xml" prefix="tkinfo" keepRoot="no"/>
    <echo message="Toolkit Version: ${tkinfo.identity.version}"/>
    <echo message="Git Hash: ${commithash}"/>
  </target>

  <target name="revertversion" description="Revert the version change (commithash) in info.xml">
    <exec executable="git">
        <arg value="checkout"/>
        <arg value="--"/>
        <arg value="${toolkit}/info.xml"/>
    </exec>
  </target>

  <target name="clean" depends="cleansamples,releaseinfo-clean"
      description="clean up toolkit code and samples">
      <delete includeemptydirs="true">
          <fileset dir="${basedir}" includes="release-*/"/>
      </delete>
      <ant dir="${toolkit}" target="clean"/>
  </target>

  <target name="toolkit"
      description="Build any code and index the toolkit." >
      <ant dir="${toolkit}" target="all"/>
  </target>
  
  <target name="toolkitIndexOnly" description="Index the toolkit.">
      <ant dir="${toolkit}" target="cleanToolkitxml" />
      <ant dir="${toolkit}" target="indextoolkit" />
  </target> 	

  <target name="spldoc" depends="setcommitversion, spldoc_work, revertversion"
    description="Create SPLDOC with git commit hash included in the version"
  />

  <target name="spldoc_work" depends="samples"> <!-- can not be called independently thus has no description -->
    <antcall target="spldoctoolkit">
       <param name="tkdir" value="${toolkit}"/>
       <param name="tktitle" value="IBMStreams ${tkinfo.identity.name} Toolkit"/>
    </antcall>
    <subant target="spldoctoolkit" genericantfile="${basedir}/build.xml">
       <dirset dir="samples" includes="*"/>
    </subant>
  </target>

  <target name="samples" depends="toolkit" description="Build the toolkit index for the samples">
    <subant target="indextoolkit" genericantfile="${basedir}/build.xml">
       <dirset dir="samples" includes="*"/>
    </subant>
  </target>
  <target name="cleansamples" description="Clean up samples index and samples code">
    <subant genericantfile="${basedir}/build.xml">
       <target name="cleantoolkit"/>
       <target name="cleansample"/>
       <dirset dir="samples" includes="*"/>
    </subant>
  </target>

  <target name="build-all-samples" depends="toolkit" description="Compile all samples">
    <subant target="buildsample" genericantfile="${basedir}/build.xml">
       <dirset dir="samples" includes="*"/>
    </subant>
  </target>

  <!-- Test targets -->
  <target name="tests" depends="toolkit">
     <ant dir="${toolkit}" target="test"/>
     <ant dir="${toolkit.test}" target="all"/>
  </target>


  <!-- Targets called on samples -->
  <target name="buildsample">
     <echo message="Sample to build: ${basedir}"/>
     <exec executable="make" failonerror="true" dir="${basedir}">
        <arg value="-f" />
        <arg value="Makefile" />
        <arg value="all" />
     </exec>
  </target>
  <target name="cleansample">
     <echo message="Sample to clean: ${basedir}"/>
     <exec executable="make" failonerror="true" dir="${basedir}">
        <arg value="-f" />
        <arg value="Makefile" />
        <arg value="clean" />
     </exec>
  </target>
  <target name="indextoolkit">
     <echo message="Tookit to index: ${basedir}"/>
     <exec executable="${streams.install}/bin/spl-make-toolkit" failonerror="true">
        <arg value="--directory"/>
        <arg value="${basedir}"/>
        <arg value="-m"/>
     </exec>
  </target>
  <target name="cleantoolkit">
     <echo message="Tookit to clean: ${basedir}"/>
     <exec executable="${streams.install}/bin/spl-make-toolkit">
        <arg value="--clean"/>
        <arg value="--directory"/>
        <arg value="${basedir}"/>
     </exec>
     <delete dir="${basedir}/output" quiet="true"/>
  </target>
  <target name="spldoctoolkit">
     <property name="tkdir" value="${basedir}"/>
     <echo message="Tookit to SPLDOC: ${tkdir}"/>
     <exec executable="${streams.install}/bin/spl-make-doc">
        <arg value="--include-composite-operator-diagram"/>
        <arg value="--author"/>
        <arg value="IBMStreams Open Source Community at GitHub - https://github.com/IBMStreams/${ant.project.name}"/>
        <arg value="--doc-title"/>
        <arg value="${tktitle}"/>
        <arg value="--directory"/>
        <arg value="${tkdir}"/>
     </exec>
  </target>

  <!-- Targets to build releases -->
  <target name="release" description="Make a toolkit release archive - purge workspace and build toolkit from scratch" depends="clean">
  	<antcall target="release-target" inheritAll="true"/>
  </target>

  <target name="release-target" depends="releaseinfo">
    <!-- prepare toolkit code and docs -->
    <antcall target="all" inheritAll="true"/>
    <antcall target="cleansamples" inheritAll="true"/> <!-- remove toolkit index from samples -->
    <!-- get os type string -->
    <property name="osVersion" value="${os.version}"/>
    <condition property="osPlat" value="el7">
      <contains string="${osVersion}" substring="el7" casesensitive="false"/>
    </condition>
    <condition property="osPlat" value="el6">
      <contains string="${osVersion}" substring="el6" casesensitive="false"/>
    </condition>
    <!-- Extract the git commit hash -->
    <exec executable="git" outputproperty="commithash.short">
        <arg value="rev-parse"/>
        <arg value="--short"/>
        <arg value="HEAD"/>
    </exec>
    <!-- create release bundle -->
    <mkdir dir="${release.dir}" />
    <property name="releasefilename" value="${release.dir}/streamsx.inet.toolkit-${tkinfo.identity.version}-${osPlat}-${os.arch}-${commithash.short}-${DSTAMP}-${TSTAMP}.tgz"/>
    <tar compression="gzip" longfile="gnu"
          destfile="${releasefilename}"
          basedir="${basedir}"
          includes="${tkinfo.identity.name}/** samples/**"
          excludes="**/.gitignore **/.gitkeep com.ibm.streamsx.inet/impl/java/src-gen/** com.ibm.streamsx.inet/impl/java/classes/** com.ibm.streamsx.inet/impl/cpp/bin/** com.ibm.streamsx.inet/.project com.ibm.streamsx.inet/.settings/** com.ibm.streamsx.inet/.classpath "
    />
    <checksum file="${releasefilename}"/>
    <checksum algorithm="sha1" file="${releasefilename}"/>
    <!-- revert commithash -->
    <antcall target="revertversion" inheritAll="true"/>
  </target>

  <!-- Extract the git commit hash and make release info -->
  <target name="releaseinfo" depends="clean-ignored" description="Make the release information file ${release.info.file}">
    <exec executable="git" outputproperty="commithash.long" failonerror="true">
      <arg value="rev-parse" />
      <arg value="HEAD" />
    </exec>
    <exec executable="bash" outputproperty="streamsversion" failonerror="true">
      <arg value="-c"/>
      <arg value="${spl-st} version | grep Version="/>
    </exec>
    <exec executable="bash" failonerror="true">
      <arg value="-c" />
      <arg value="echo -e &quot;commit_hash=${commithash.long}\nos=${os.version}\nStreams_${streamsversion}&quot; > ${release.info.file}"/>
    </exec>
    <echo message="Generated release info file ${release.info.file}"/>
    <exec executable="bash" failonerror="true">
      <arg value="-c" />
      <arg value="cat ${release.info.file}" />
    </exec>
    <!-- Extract info from the toolkit's info.xml -->
    <xmlproperty file="${toolkit}/info.xml" prefix="tkinfo" keepRoot="no"/>
  </target>

  <target name="releaseinfo-clean" description="remove the release information file ${release.info.file}">
    <delete file="${release.info.file}"/>
  </target>

  <!--- Targets to purge the workspace before a release archive is ptroduced -->
  <target name="clean-ignored" depends="warn-unclean" description="Remove all git-ignored files (exclude model files) and warn if workspace has uncommited changes"/>

  <target name="warn-unclean" depends="check-unclean" if="has.uncommited">
    <echo>!Your workspace is not clean!</echo>
    <echo>Commit all changes before you produce a release</echo>
    <echo>commitstatus:</echo>
    <echo>${commitstatus}</echo>
    <input>Press Return key to continue or ^C to exit...</input>
  </target>

  <target name="check-unclean" depends="warn-untracked">
    <exec executable="git" outputproperty="commitstatus">
      <arg value="status" />
      <arg value="--porcelain" />
    </exec>
    <!-- set condition true if there are any non-whitespaces -->
    <condition property="has.uncommited">
      <matches string="${commitstatus}" pattern="\S" multiline="true"/>
    </condition>
    <echo message="has.uncommited=${has.uncommited}"/>
  </target>

  <target name="warn-untracked" depends="check-untracked" if="has.untracked">
    <echo>!!! DANGER: Git-ignored files to be removed from your workspace:</echo>
    <echo>${untracked}</echo>
    <input>Press Return key to continue or ^C to exit...</input>
    <exec executable="git" failonerror="true">
      <arg value="clean"/>
      <arg value="--force"/>
      <arg value="-d"/>
      <arg value="-x"/>
      <arg value="--"/>
      <arg value="${toolkit}/"/>
      <arg value="samples/"/>
      <arg value="README.md"/>
      <arg value="doc/"/>
    </exec>
  </target>

  <target name="check-untracked">
    <exec executable="git" outputproperty="untracked" failonerror="true">
      <arg value="clean"/>
      <arg value="--dry-run"/>
      <arg value="-d"/>
      <arg value="-x"/>
      <arg value="--"/>
      <arg value="${toolkit}/"/>
      <arg value="samples/"/>
      <arg value="README.md"/>
      <arg value="doc/"/>
    </exec>
    <!-- set condition true if there are any non-whitespaces -->
    <condition property="has.untracked">
      <matches string="${untracked}" pattern="\S" multiline="true"/>
    </condition>
    <echo message="has.untracked=${has.untracked}"/>
  </target>

</project>
