use com.ibm.streamsx.inet.http::HTTPRequest;
use com.ibm.streamsx.testframe::FileSink1;

public composite Main {
	param
		//_0_expression<rstring> $url: getSubmissionTimeValue("url", 'httpx://httpbin.org/get');
		//_1_expression<rstring> $url: getSubmissionTimeValue("url", 'httpx://httpbin.org/get');
		//_2_expression<rstring> $url: getSubmissionTimeValue("url", 'http://httpbin.orgx/get');
		//_3_expression<rstring> $url: getSubmissionTimeValue("url", 'http://httpbin.orgx/get');
		//_4_expression<rstring> $url: getSubmissionTimeValue("url", 'http://httpbin.org/get');
		//_5_expression<rstring> $url: getSubmissionTimeValue("url", 'http://httpbin.org/get');

	graph
		stream<uint64 id, rstring method, rstring data> Trigger as O = Beacon() {
			param 
				iterations : 1;
			output O:
				id = IterationCount(),
				//_0_method = "PUT",
				//_1_method = "GET",
				//_2_method = "HEAD",
				//_3_method = "POST",
				//_4_method = "get",
				//_5_method = "get",
				data = "My data";
		}
		
		stream<uint64 id, rstring method, rstring url, rstring status, int32 stat, rstring respData, rstring err> Response as O = HTTPRequest(Trigger as I) {
			param
				fixedUrl: $url;
				method: method;
				requestBodyAttribute : data;
				//_0_outputBody : "respData";
				//_1_outputDataLine : "respData";
				//_2_outputBody : "respData";
				//_3_outputDataLine : "respData";
				//_4_outputBody : "respData";
				//_5_outputDataLine : "respData";

				outputStatus : "status";
				outputStatusCode : "stat";
				errorDiagnostics : "err";
				
		}
		
		() as Sink = FileSink1(Response) { }
		
	
	config
		restartable : false;
}
