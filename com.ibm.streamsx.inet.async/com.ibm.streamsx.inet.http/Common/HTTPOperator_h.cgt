
class MY_OPERATOR: public MY_BASE_OPERATOR {
public:
	MY_OPERATOR();
	virtual ~MY_OPERATOR();

	void allPortsReady();
	void prepareToShutdown();

	void process(uint32_t idx);
	void process(Tuple const & tuple, uint32_t port);
	void process(Punctuation const & punct, uint32_t port);
	
	void handleMetrics(MetricKind kind, uint32_t value = 0);
	void handleSubmit(void_ptr const& ituple, std::string const& body, resp_headers const& headers, std::string const& message, uint16_t status, uint32_t port);
	size_t limitThreads(size_t threads);

private:
	atomic<unsigned> numConnections_;
	int threads_;
	taus88 gen_;
	uniform_int_distribution<> randInt_;
	std::vector< shared_ptr<httpClient::HttpClient> > httpClients_;

	OperatorMetrics & opm_;
	static thread_specific_ptr<OPort0Type> otuplePtr_;
	static thread_specific_ptr<int> threadInd_;
	
	OPort0Type & getOutputTuple();
};
