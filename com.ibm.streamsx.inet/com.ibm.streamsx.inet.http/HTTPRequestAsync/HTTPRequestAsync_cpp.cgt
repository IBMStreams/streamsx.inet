<%SPL::CodeGen::implementationPrologue($model);%>

<%
my $bodyParam = $model->getParameterByName('body');
my $bodyType = $bodyParam ? $bodyParam->getValueAt(0)->getSPLType() : '';
my $bodyExpr = $bodyParam ? $bodyParam->getValueAt(0)->getCppExpression() : '';
my $contentType = ($_ = $model->getParameterByName('contentType')) ? $_->getValueAt(0)->getSPLExpression() : 'urlencoded';
my $headersExpr = ($_ = $model->getParameterByName('headers')) ? $_->getValueAt(0)->getCppExpression() : '';
my $methodExpr = $model->getParameterByName('method')->getValueAt(0)->getCppExpression();
my $threads = ($_ = $model->getParameterByName('workerQueues')) ? $_->getValueAt(0)->getCppExpression() : 1;
my $userAgent = ($_ = $model->getParameterByName('userAgent')) ? $_->getValueAt(0)->getCppExpression() : '"IBM Streams HttpRequestAsync/1.0"';
my $url = $model->getParameterByName('url')->getValueAt(0)->getCppExpression();

%>

@include "Common/HTTPOperator_cpp.cgt"

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
	IPort0Type const & iport$0 = static_cast<IPort0Type const&>(tuple);

	<%$headersExpr = $headersExpr ? "($headersExpr.begin(), $headersExpr.end())" : '';%>
	unordered_map headers <%=$headersExpr%>;
	if(headers.count("Content-Type") == 0)
		headers["Content-Type"] = <%=$ContentType{$contentType}%>;

	if(headers.count("User-Agent") == 0)
		headers["User-Agent"] = <%=$userAgent%>;

	<%
	  if ($bodyType eq 'map<rstring,rstring>') {
		$bodyExpr = $bodyExpr ? "($bodyExpr.begin(), $bodyExpr.end())" : '';
		print qq( unordered_map body $bodyExpr; );
	    $bodyExpr = 'body';
	  }
	  my $args = qq((httpClient::Method)$methodExpr.getIndex(), void_ptr(new IPort0Type(iport\$0)), $url, headers, $bodyExpr);
	%>

	if(threads_ == 1)
		httpClients_[0]->httpReq(<%=$args%>);
	else
		httpClients_[randInt_(gen_)]->httpReq(<%=$args%>);
}

<%
SPL::CodeGen::exitln("'body' param must be of type 'rstring' or 'map<rstring,rstring>'", $model->getContext()->getSourceLocation())
	unless ($bodyType ~~ ['rstring','map<rstring,rstring>']);

validateErrorPort($model);
%>
<%SPL::CodeGen::implementationEpilogue($model);%>
