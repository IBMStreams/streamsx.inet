/*
*******************************************************************************
* Copyright (C) 2010,2019, International Business Machines Corporation. 
* All Rights Reserved. *
*******************************************************************************
*/

namespace com.ibm.streamsx.inet.test;

use com.ibm.streamsx.inet.http::HTTPRequest;

/**
 * This sample demonstrates the use of the HTTPRequest operator.
 * This sample executes a number of http requests and prints the result to the standard output.
 * If you want to store the user credentials securely, you should consider to use a
 * Streams Application Configuration Object. see 
 * [https://www.ibm.com/support/knowledgecenter/en/SSCRJU_4.2.0/com.ibm.streams.dev.doc/doc/creating-secure-app-configs-dev.html]
 * and fetch the values from the application property with spl function getApplicationConfigurationProperty.
 * 
 */
public composite HTTPRequestTest
{
	graph

		stream<rstring result> RequestTest = HTTPRequestTestComp() {
		}
}

/**
 * Tests the HTTPRequest operator.
 *
 * @param   url        The url list for the http requests
 * @param   method     The method list for the http request
 * @param   data       The message data used in method PUT
 * @param   mess       Attribute to be used in method POST
 * @param   contt      The Content-Type for methods POST ant PUT
 * @param   iterations The number of requests send
 * @param   period     The period of the requests
 */
public composite HTTPRequestTestComp (output DummyResult)
{
	param
		expression<list<rstring>> $url        : ["http://httpbin.org/get","https://httpbin.org/gzip","http://httpbin.org/redirect/3","http://httpbin.org/post","http://httpbin.org/post","http://httpbin.org/put", "http://httpbin.org/delete", "http://httpbin.org/basic-auth/user1/passwd1"];
		expression<list<rstring>> $method     : ["GET","GET","GET","POST","POST","PUT","DELETE","GET"];
		expression<list<rstring>> $data       : ["","","","","","text 1 (t1)","",""];
		expression<list<rstring>> $mess       : ["mess 1 (&m1)","mess 2 (&m2)","mess 3 (m3)","mess 4 (m&4)","mess 5 (m&5)","xxx","xxx","xxx"];
		expression<list<rstring>> $contt      : ["","","","application/x-www-form-urlencoded","application/json","text/plain","",""];
		expression<int32>         $iterations : 8;
		expression<float64>       $period     : 0.1;
	graph
		stream<uint64 id, rstring url, rstring method, rstring data, rstring mess, rstring contentType> Trigger as O = Beacon() {
			param 
				iterations : $iterations;
				period	 : $period;
			output O:
				id = IterationCount(),
				url = $url[(int32)IterationCount() % size($url)],
				method = $method[(int32)IterationCount() % size($method)],
				data = $data[(int32)IterationCount() % size($data)],
				mess = $mess[(int32)IterationCount() % size($mess)],
				contentType = $contt[(int32)IterationCount() % size($contt)];
		}
		
		stream<uint64 id, rstring method, rstring url, rstring status, int32 stat, rstring contentEncoding, rstring contentType, list<rstring> responseHeader, rstring respData> Response as O = HTTPRequest(Trigger as I) {
			param
				url: url;
				method : method;
				outputBody : "respData";
				outputStatus : "status";
				outputStatusCode : "stat";
				outputContentEncoding : "contentEncoding";
				outputContentType : "contentType";
				outputHeader : "responseHeader";
				extraHeaders : "Myheader: aa(aa)", "Myheader2: bb&b";
				contentType : contentType;
				requestBodyAttribute : data;
				requestAttributesAsUrlArguments: true;
				sslTrustStoreFile : getThisToolkitDir()+"/etc/cacert";
				sslTrustStorePassword : "mypass";
				authenticationType : "STANDARD";
				authenticationFile : getThisToolkitDir()+"/etc/http_request_auth.properties";
		}
		
		stream<rstring result> DummyResult = Custom(Response as I) {
			logic
				onTuple I: {
					printStringLn("******************************************");
					printStringLn("id="+(rstring)id+"   method="+method+"	 url="+url);
					printStringLn("status="+status+"	code="+(rstring)stat);
					printStringLn("contentEncoding="+contentEncoding+"	   contentType="+contentType);
					printStringLn("ResponseHeader");
					printStringLn((rstring)responseHeader);
					printStringLn("body");
					printStringLn(respData);

					submit ({result=""}, DummyResult);
				}
				onPunct I: println(currentPunct());
		}

}
