<%

my %ContentType = (
	js => '"application/javascript"',
	json => '"application/json"',
	urlencoded => '"application/x-www-form-urlencoded"',
	xml_ => '"application/xml"',
	css => '"text/css"',
	csv => '"text/csv"',
	html => '"text/html"',
	plain => '"text/plain"'
);

sub handleOutput(@) {
	my ($body, $headers, $message, $status, $outputAttributes) = @_;

		foreach my $attr (@{$outputAttributes}) {
		  my $attrName = $attr->getName();
		  if ($attr->hasAssignmentWithOutputFunction()) {
			  my $operation = $attr->getAssignmentOutputFunctionName();
			  if ($operation eq 'AsIs') {
				my $paramValue = $attr->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression();
				print qq(
				  otuple.set_$attrName($paramValue);
				);
			  }
			  elsif ($operation eq 'Body') {
				print qq(
				  otuple.set_$attrName($body);
				);
			  }
			  elsif ($operation eq 'Headers') {
				print qq(
				  if(!$headers.empty()) otuple.set_$attrName(HMap($headers.begin(), $headers.end()));
				);
			  }
			  elsif ($operation eq 'Message') {
				print qq(
				  otuple.set_$attrName($message);
				);
			  }
			  elsif ($operation eq 'Status') {
				print qq(
				  otuple.set_$attrName($status);
				);
			  }
			  else {
				my $paramValues = $attr->getAssignmentOutputFunctionParameterValues();
				print qq(
				  otuple.set_$attrName($operation(join(",", map{$_->getCppExpression()} @{$paramValues})));
				);
			  }
		  }
		  elsif ($attr->getAssignmentValue()) {
				my $assign = $attr->getAssignmentValue()->getCppExpression();
				print qq(
				  otuple.set_$attrName($assign);
				);
		  }
		}
}

sub handleError(@) {
	my ($message, $status, $outputAttributes) = @_;

		foreach my $attr (@{$outputAttributes}) {
		  my $attrName = $attr->getName();
		  if ($attrName eq 'message') {
			print qq(
			  otuple.set_message($message);
			);
		  }
		  elsif ($attrName eq 'status') {
			print qq(
			  otuple.set_status($status);
			);
		  }
		  elsif ($attr->getAssignmentValue()) {
			my $assign = $attr->getAssignmentValue()->getCppExpression();
			print qq(
			  otuple.set_$attrName($assign);
			);
		  }
		}
}

sub validateErrorPort(@) {
	my ($model) = @_;

	if ($model->getNumberOfOutputPorts() > 1) {
		my $input = $model->getInputPortAt(0);
	
		for my $outAttr (@{$model->getOutputPortAt(1)->getAttributes()}) {
			my $inAttr = $input->getAttributeByName($outAttr->getName());
			
			SPL::CodeGen::exitln("attribute '" . $outAttr->getName() . "' of type '" . $outAttr->getSPLType() . "' is not part of the error port schema", $model->getContext()->getSourceLocation())
				unless ( ($outAttr->getName() eq 'message' && $outAttr->getSPLType() eq 'rstring') ||
						 ($outAttr->getName() eq 'status' && $outAttr->getSPLType() eq 'uint16') ||
						 ($inAttr && $inAttr->getSPLType() eq $outAttr->getSPLType()));
		}
	}
}

%>