/* Copyright (C) 2013-2014, International Business Machines Corporation */
/* All Rights Reserved */

/* Additional includes go here */
#include <cstring>
#include <cstdlib>

<%
	my $hasPasswordStream = $model->getNumberOfInputPorts() == 2;
	my $hasErrorStream = $model->getNumberOfOutputPorts() == 2;
	
	my $protocol     = $model->getParameterByName("protocol")->getValueAt(0)->getCppExpression();
	my $protocolType = $model->getParameterByName("protocol")->getValueAt(0)->getCppType();
	my $protocolSPLType = $model->getParameterByName("protocol")->getValueAt(0)->getSPLType();
	my $protocolEm = $model->getParameterByName("protocol")->getValueAt(0)->getParameterExpressionMode();
	print "//$protocol\n//$protocolType\n//$protocolSPLType\n//$protocolEm\n";
	
	my $hasCloseConnectionMode = $model->getParameterByName("connectionCloseMode");
	my $closeConnectionMode;
	my $closeConnectionModeType;
	if ($hasCloseConnectionMode) {
		$closeConnectionMode = $hasCloseConnectionMode->getValueAt(0)->getCppExpression();
		$closeConnectionModeType = $hasCloseConnectionMode->getValueAt(0)->getCppType();
	}
	print "//closeConnectionMode : $closeConnectionMode\n";
	print "//closeConnectionModeType : $closeConnectionModeType\n";

	my $host = $model->getParameterByName("host")->getValueAt(0)->getCppExpression();
	print "//host : $host\n";
	my $path = $model->getParameterByName("path")->getValueAt(0)->getCppExpression();
	print "//path : $path\n";
	
	my $filename = $model->getParameterByName("filename");
	$filename = $filename->getValueAt(0)->getCppExpression() if $filename;
	
	my $renameTo = $model->getParameterByName("renameTo");
	$renameTo = $renameTo->getValueAt(0)->getCppExpression() if $renameTo;

	my $localFilename = $model->getParameterByName("localFilename")->getValueAt(0)->getCppExpression();

	my $username = $model->getParameterByName("username")->getValueAt(0)->getCppExpression();

	my $password = $model->getParameterByName("password");
	$password = $password->getValueAt(0)->getCppExpression() if ($password);
	print "//password : $password\n";

	my $curlVerbose = $model->getParameterByName("curlVerbose");
	$curlVerbose = $curlVerbose ? $curlVerbose->getValueAt(0)->getCppExpression() : "false";
	print "//curlVerbose $curlVerbose\n";

	my $useEPSV = $model->getParameterByName("useEPSV");
	$useEPSV = $useEPSV ? $useEPSV->getValueAt(0)->getCppExpression() : "true";
	print "//useEPSV $useEPSV\n";
	my $useEPRT = $model->getParameterByName("useEPRT");
	$useEPRT= $useEPRT ? $useEPRT->getValueAt(0)->getCppExpression() : "true";
	print "//useEPRT $useEPRT\n";
	my $usePRET;
	# = $model->getParameterByName("usePRET");
	#if ($usePRET) { $usePRET = $usePRET->getValueAt(0)->getCppExpression(); }
	#print "//usePRET $usePRET\n";
	my $usePORT = $model->getParameterByName("usePORT");
	if ($usePORT) { $usePORT = $usePORT->getValueAt(0)->getCppExpression(); } else { undef $usePORT; }
	print "//usePORT $usePORT\n";
	my $skipPASVIp = $model->getParameterByName("skipPASVIp");
	$skipPASVIp = $skipPASVIp ? $skipPASVIp->getValueAt(0)->getCppExpression() : "false";
	print "//skipPASVIp $skipPASVIp\n";

	my $sendStatisticsOnError = $model->getParameterByName("sendStatisticsOnError");
	$sendStatisticsOnError = $sendStatisticsOnError ? $sendStatisticsOnError->getValueAt(0)->getSPLExpression : "false";
	print "//sendStatisticsOnError=$sendStatisticsOnError\n";
	
	# scan output functions verify operator model out port 0
	my $mainOutputPort = $model->getOutputPortAt(0);
#	for (my $i = 0; $i < $mainOutputPort->getNumberOfAttributes(); $i++) {
#		my $attr = $mainOutputPort->getAttributeAt($i);
#		if ($attr->hasAssignmentWithOutputFunction()) {
#			my $of = $attr->getAssignmentOutputFunctionName();
#			if ($of eq "Success") {
#				if (!SPL::CodeGen::Type::isBoolean($attr->getSPLType())) {
#					print STDERR "Attribute ".$attr->getName() . " must have type boolean at $mainOutputPort->getSourceLocation()\n";
#					exit(1);
#				}
#			} elsif ($of eq "Url") {
#				if (!SPL::CodeGen::Type::isRString($attr->getSPLType())) {
#					print STDERR "Attribute ".$attr->getName() . " must have type rstring at $mainOutputPort->getSourceLocation()\n";
#					exit(1);
#				}
#			} elsif ($of eq "FileSize") {
#				if (!SPL::CodeGen::Type::isUint64($attr->getSPLType())) {
#					print STDERR "Attribute ".$attr->getName() . " must have type uint64 at $mainOutputPort->getSourceLocation()\n";
#					exit(1);
#				}
#			} elsif ($of eq "NoTransfers") {
#				if (!SPL::CodeGen::Type::isUint32($attr->getSPLType())) {
#					print STDERR "Attribute ".$attr->getName() . " must have type uint32 at $mainOutputPort->getSourceLocation()\n";
#					exit(1);
#				}
#			} elsif ($of eq "NoFailures") {
#				if (!SPL::CodeGen::Type::isUint32($attr->getSPLType())) {
#					print STDERR "Attribute ".$attr->getName() . " must have type uint32 at $mainOutputPort->getSourceLocation()\n";
#					exit(1);
#				}
#			} elsif ($of eq "NoBytesTransferred") {
#				if (!SPL::CodeGen::Type::isUint64($attr->getSPLType())) {
#					print STDERR "Attribute ".$attr->getName() . " must have type uint64 at $mainOutputPort->getSourceLocation()\n";
#					exit(1);
#				}
#			} elsif ($of eq "TransferSpeed") {
#				if (!SPL::CodeGen::Type::isFloat64($attr->getSPLType())) {
#					print STDERR "Attribute ".$attr->getName() . " must have type float64 at $mainOutputPort->getSourceLocation()\n";
#					exit(1);
#				}
#			}
#		}
#	}
	# scan output functions verify operator model out port 1
	my $errorOutput;
	if ($hasErrorStream) {
		$errorOutput = $model->getOutputPortAt(1);
#		for (my $i = 0; $i < $errorOutput->getNumberOfAttributes(); $i++) {
#			my $attr = $errorOutput->getAttributeAt($i);
#			if ($attr->hasAssignmentWithOutputFunction()) {
#				my $of = $attr->getAssignmentOutputFunctionName();
#				if ($of eq "ErrorNumber") {
#					if (!SPL::CodeGen::Type::isInt32($attr->getSPLType())) {
#						print STDERR "Attribute ".$attr->getName() . " must have type int32 at $errorOutput->getSourceLocation()\n";
#						exit(1);
#					}
#				} elsif ($of eq "ErrorText") {
#					if (!SPL::CodeGen::Type::isRString($attr->getSPLType())) {
#						print STDERR "Attribute ".$attr->getName() . " must have type rstring at $errorOutput->getSourceLocation()\n";
#						exit(1);
#					}
#				} elsif ($of eq "Url") {
#					if (!SPL::CodeGen::Type::isRString($attr->getSPLType())) {
#						print STDERR "Attribute ".$attr->getName() . " must have type rstring at $errorOutput->getSourceLocation()\n";
#						exit(1);
#					}
#				} elsif ($of eq "NoTransfers") {
#					if (!SPL::CodeGen::Type::isUint32($attr->getSPLType())) {
#						print STDERR "Attribute ".$attr->getName() . " must have type uint32 at $errorOutput->getSourceLocation()\n";
#						exit(1);
#					}
#				} elsif ($of eq "NoFailures") {
#					if (!SPL::CodeGen::Type::isUint32($attr->getSPLType())) {
#						print STDERR "Attribute ".$attr->getName() . " must have type uint32 at $errorOutput->getSourceLocation()\n";
#						exit(1);
#					}
#				} elsif ($of eq "NoBytesTransferred") {
#					if (!SPL::CodeGen::Type::isUint64($attr->getSPLType())) {
#						print STDERR "Attribute ".$attr->getName() . " must have type uint64 at $errorOutput->getSourceLocation()\n";
#						exit(1);
#					}
#				}
#			}
#		}
	}
%>

<%SPL::CodeGen::implementationPrologue($model);%>

using namespace com::ibm::streamsx::inet::ftp;
// Constructor
MY_OPERATOR::MY_OPERATOR() :
	mutex(),
	shutdown(false)
{
	FTPWrapper::TransmissionProtocolLiteral tpl = static_cast<FTPWrapper::TransmissionProtocolLiteral>(<%=$protocol%>.getIndex());
	FTPWrapper::CloseConnectionMode cm = FTPWrapper::never;
<%	if ($hasCloseConnectionMode) { %>
		cm = static_cast<FTPWrapper::CloseConnectionMode>(<%=$closeConnectionMode%>.getIndex());
<%	} %>
	SPLAPPTRC(L_INFO, "Work with protocol:" << FTPWrapper::toString(tpl) << " closeConnectionMode=" << FTPWrapper::toString(cm), debugAspect);

	writer = new FTPPutFileWrapper(cm, tpl, <%=$curlVerbose%>, FTPWrapper::create, debugAspect, <%=$useEPSV%>, <%=$useEPRT%>, <%=$skipPASVIp%>);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() {
	delete writer;
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() {
	// This is an asynchronous call
	shutdown = true;
	writer->prepareToShutdown();
}

// Tuple processing for non mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
	SPLAPPTRC(L_TRACE, "process(" << tuple << ", " << port << ")", debugAspect);

	AutoPortMutex apm(mutex, *this);

	switch (port) {
	case 0 : {
		IPort0Type const & iport$0 = static_cast<IPort0Type const &> (tuple);

<%		unless ($hasPasswordStream) { %>
			//set credentials
			writer->setUsername(<%=$username%>);
<%			if ($password) { %>
				writer->setPassword(<%=$password%>);
<%			} %>
<%		} %>
		const rstring localFilename(<%=$localFilename%>);
		
		if (localFilename[0] == '/') {
		   writer->setLocalFilename(localFilename);
		}
		else {
		     writer->setLocalFilename(Functions::Utility::dataDirectory()+"/"+<%=$localFilename%>);
		}
		writer->setHost(<%=$host%>);
		writer->setPath(<%=$path%>);
<%		if ($filename) {%>
			writer->setFilename(<%=$filename%>);
<%		}%>
<%if	($usePORT) {%>
			writer->setUsePORT(<%=$usePORT%>);
<%		}%>
<%if	($renameTo) {%>
			writer->setRenameTo(<%=$renameTo%>);
<%		}%>

		//perform operation
		if (writer->perform()) {
			SPLAPPTRC(L_DEBUG, "operation well performed", debugAspect);
			generateOutTuple(true, iport$0);
		} else {
<%			if ($sendStatisticsOnError eq "true") {%>
				generateOutTuple(false, iport$0);
<%			}%>
			sendError(writer->getError(), iport$0);
		}
		break;
	}
<%	if ($hasPasswordStream) { %>
		case 1 : {
			IPort1Type const & iport$1 = static_cast<IPort1Type const &> (tuple);
			//set credentials
			writer->setUsername(<%=$username%>);
<%			if ($password) {%>
				writer->setPassword(<%=$password%>);
<%			}%>
		};
<%	} %>
	}
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punctuation, uint32_t port) {
	AutoPortMutex apm(mutex, *this);
	if(Punctuation::WindowMarker == punctuation) {
		SPLAPPTRC(L_DEBUG, "got a punct WindowMarker from port " << port, debugAspect);
		if (0 == port) {
			writer->onPunct();
			submit(SPL::Punctuation(SPL::Punctuation::WindowMarker), 0);
		}
	} else { //final marker
		SPLAPPTRC(L_DEBUG, "got a punct FinalMarker from port " << port, debugAspect);
	}
}

void MY_OPERATOR::generateOutTuple(bool success, IPort0Type const & iport$0) {
<%	# generate the initializer for the tuple
	my $init = "";
	my $numAttrs = $mainOutputPort->getNumberOfAttributes();
	for (my $i = 0; $i < $numAttrs; $i++) {
		my $attr = $mainOutputPort->getAttributeAt($i);
		my $aName = $attr->getName();
		if ($attr->hasAssignmentWithOutputFunction()) {
			my $of = $attr->getAssignmentOutputFunctionName();
			if ($of eq "Success") {
				$init .= "SPL::boolean(success)";
			} elsif ($of eq "Url") {
				$init .= "SPL::rstring(writer->getUrl())";
			} elsif ($of eq "FileSize") {
				$init .= "SPL::uint64(writer->getFileSize())";
			} elsif ($of eq "NoTransfers") {
				$init .= "SPL::uint32(writer->getNoTransfers())";
			} elsif ($of eq "NoTransferFailures") {
				$init .= "SPL::uint32(writer->getNoTransferFailures())";
			} elsif ($of eq "NoBytesTransferred") {
				$init .= "SPL::uint32(writer->getNoBytesTransferred())";
			} elsif ($of eq "TransferSpeed") {
				$init .= "SPL::float64(writer->getTransferSpeed())";
			} elsif ($of eq "AsIs") {
				$init .= SPL::CodeGenHelper::ensureValue ($attr->getSPLType(), $attr->getAssignmentValue()->getCppExpression());
			}
		} else {
			$init .= $attr->getCppType;
			$init .= "()";
		}
		$init .= ",\n" if $i < $numAttrs-1;
	}
%>
	OPort0Type otuple = OPort0Type(<%=$init%>);
	SPLAPPTRC(L_TRACE, "send tuple ", debugAspect);
	submit(otuple, 0);
}

void MY_OPERATOR::sendError(SPL::rstring const & reason, IPort0Type const & iport$0) {
	SPL::rstring r2 = reason + " url:" + writer->getUrl() + " localFile:" + writer->getLocalFilename();
	SPLAPPTRC(L_ERROR, r2, debugAspect);
<% if ($hasErrorStream) { %>
	SPL::timestamp t = SPL::Functions::Time::getTimestamp();
	SPL::rstring err2 = SPL::Functions::Time::ctime(t) + " " + r2;
	<%	# generate the initializer for the tuple
		my $init = "";
		my $numAttrs = $errorOutput->getNumberOfAttributes();
		for (my $i = 0; $i < $numAttrs; $i++) {
			my $attr = $errorOutput->getAttributeAt($i);
			my $aName = $attr->getName();
			if ($attr->hasAssignmentWithOutputFunction()) {
				my $of = $attr->getAssignmentOutputFunctionName();
				if ($of eq "ErrorNumber") {
					$init .= "errorNumber";
				} elsif ($of eq "ErrorText") {
					$init .= "SPL::rstring(err2)";
				} elsif ($of eq "Url") {
					$init .= "SPL::rstring(writer->getUrl())";
				} elsif ($of eq "NoTransfers") {
					$init .= "SPL::uint32(writer->getNoTransfers())";
				} elsif ($of eq "NoTransferFailures") {
					$init .= "SPL::uint32(writer->getNoTransferFailures())";
				} elsif ($of eq "NoBytesTransferred") {
					$init .= "SPL::uint32(writer->getNoBytesTransferred())";
				} elsif ($of eq "AsIs") {
					$init .= SPL::CodeGenHelper::ensureValue ($attr->getSPLType(), $attr->getAssignmentValue()->getCppExpression());
				}
			} else {
				$init .= $attr->getCppType;
				$init .= "()";
			}
			$init .= ",\n" if $i < $numAttrs-1;
		}
	%>
	OPort1Type ot = OPort1Type(<%=$init%>);
	submit(ot, (uint32_t)1);
<% } %>
}

SPL::rstring MY_OPERATOR::debugAspect("FTPPutFile");

<%SPL::CodeGen::implementationEpilogue($model);%>

