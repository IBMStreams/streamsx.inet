use com.ibm.streamsx.inet.ftp::*;
use spl.file::*;

public composite Main {
    param
        expression<Protocol> $protocol :      (Protocol)getSubmissionTimeValue("protocol", "ftp");
        expression<rstring> $host :           getSubmissionTimeValue("host", "speedtest.tele2.net");
        expression<rstring> $path :           getSubmissionTimeValue("path", "/");
        expression<rstring> $username :       getSubmissionTimeValue("username", "anonymous");
        expression<rstring> $password :       getSubmissionTimeValue("password", "anon@localhost");
        expression<rstring> $fileToTransfer : getSubmissionTimeValue("fileToTransfer", "1MB.zip");
        expression<boolean> $verbosity :      (boolean)getSubmissionTimeValue("verbosity", "false");

    graph
        //provide a trigger stream for the ftp directory scan
        stream<int32 count> TriggerStream = Beacon() {
            param
                initDelay : 2.0;
                iterations : 1;
                period : 10.0;
            output TriggerStream : count = (int32)IterationCount();
            config placement : partitionColocation("DIR");
        }

        //scan the remote directory
        (
            stream<rstring fileName, uint64 size, rstring date, rstring user, boolean isFile, uint32 transferCount, uint32 failureCount, uint64 bytesTransferred, float64 speed> FilenameStream as OUT;
            stream<rstring errorText, int32 error, uint32 transferCount, uint32 failureCount, uint64 bytesTransferred> ErrorStream as ERR
        ) = FTPReader(TriggerStream) {
            param
                protocol : $protocol;
                isDirReader : true;
                host : $host;
                path : $path;
                username : $username;
                password : $password;
                useEPSV : false;
                curlVerbose : $verbosity;
            output
                OUT :
                    fileName = FileName(),
                    size = FileSize(),
                    date = FileDate(),
                    user = FileUser(),
                    isFile = IsFile(),
                    transferCount = TransferCount(),
                    failureCount = TransferFailureCount(),
                    bytesTransferred = BytesTransferred(),
                    speed = TransferSpeed();
                ERR:
                    errorText = ErrorText(),
                    error = ErrorCode(),
                    transferCount = TransferCount(),
                    failureCount =  TransferFailureCount(),
                    bytesTransferred = BytesTransferred();
            config placement : partitionColocation("DIR");
        }
        //print the results
        () as DirTap = ResultSink(FilenameStream) {
            param
                what : "DIRSCAN_";
                loc : "DIRTAP";
        }
        () as ErrorTap = ResultSink(ErrorStream) {
            param
                what : "DIRERROR_";
                loc : "DIRTAP";
        }

        //Filter out one file which is transferred
        stream<IN> FilteredFilenameStream = Filter(FilenameStream as IN) {
            param
                filter: isFile && fileName == $fileToTransfer;
        }

        //get bin files
        (
            stream<blob content, int32 sequence, rstring file, rstring url, float64 speed> BinFileStream as OUT;
            stream<rstring errorText, int32 error, uint32 transferCount, uint32 failureCount, uint64 bytesTransferred> BinErrorStream as ERR
        ) = FTPReader(FilteredFilenameStream as IN) {
            param
                protocol : $protocol;
                host : $host;
                path : $path;
                filename : IN.fileName;
                username : $username;
                password : $password;
                connectionCloseMode : ever;
                curlVerbose : $verbosity;
            output
                OUT :
                    content = Binary(),
                    sequence = Sequence(),
                    file = IN.fileName,
                    url = Url(),
                    speed = TransferSpeed();
                ERR:
                    errorText = ErrorText(),
                    error = ErrorCode(),
                    transferCount = TransferCount(),
                    failureCount =  TransferFailureCount(),
                    bytesTransferred = BytesTransferred();
            config placement : partitionColocation("BIN");
        }

        //print the results
        () as BinTap = ResultSink(BinFileStream) {
            param
                what : "BINDATA_";
                loc : "BINTAP";
        }
        () as BinErrorTap = ResultSink(BinErrorStream) {
            param
                what : "BINERROR_";
                loc : "BINTAP";
        }
    
}

composite ResultSink (input IN) {
    param
        expression<rstring> $what;
        expression<rstring> $loc;
    graph
        stream<rstring text>S2 as OUT = Custom(IN) {
            logic
                state : rstring what_ = $what;
                onTuple IN : {
                    timestamp t = getTimestamp();
                    rstring str = ctime(t) + " " + (rstring)getNanoseconds(t) + (rstring)IN;
                    printStringLn(what_ + str);
                    submit({text=what_ + str}, OUT);
                }
                onPunct IN : {
                    timestamp t = getTimestamp();
                    rstring str = ctime(t) + " " + (rstring)getNanoseconds(t) + " " + (rstring)currentPunct();
                    printStringLn(what_ + str);
                    submit({text=what_ + str}, OUT);
                    if (currentPunct() == Sys.FinalMarker) {
                        mutable int32 err = 0;
                        uint64 fileh = fopen (dataDirectory() + "/" + $what + "FINAL", "w", err);
                        printStringLn("Filehandle is " + (rstring)fileh);
                        printStringLn("Error is " + (rstring)err);
                        fwriteString("FIN", fileh, err);
                        printStringLn("Error is " + (rstring)err);
                        fclose(fileh, err);
                        printStringLn("Error is " + (rstring)err);
                    }
                }
            config placement : partitionColocation($loc);
        }
        () as Sink = FileSink(S2) {
            param
                file : $what + ".txt";
                closeMode : punct;
                append : true;
            config placement : partitionColocation($loc);
        }
}
