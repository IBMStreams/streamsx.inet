/*
*******************************************************************************
* Copyright (C) 2014, International Business Machines Corporation. 
* All Rights Reserved. *
*******************************************************************************
*/

namespace com.ibm.streamsx.inet.sample;

use com.ibm.streamsx.inet::InetSource;


list<rstring> getTitles(rstring content) {
  mutable list<rstring> titles = [];
  mutable int32 i = 0;
  while(true) {
    i = findFirst(content, "<title>", i);
    if (i==-1) break;
    int32 j = findFirst(content, "</title>", i);
    if (j==-1) break;
    rstring title = regexReplacePerl(substring(content, i+7, j-i-7), "<!\\[CDATA\\[|\\]\\]>", "", true);
    appendM(titles, title);
    i = j+8;
  }
  return titles;
}


public rstring formatDateTimeLocal(float64 when, rstring pattern) {
  timestamp ts = createTimestamp((int64)when, 0u);
  mutable Sys.tm tm = {};
  time(ts, tm);
  return strftime(tm, pattern); }


public composite GetHeadlines {

  param

  expression<list<rstring>> $urls: 
    [ "http://rss.cnn.com/rss/cnn_world.rss",
      "http://feeds.bbci.co.uk/news/world/rss.xml",
      "http://feeds.reuters.com/reuters/INbusinessNews",
      "http://classic.iol.co.za/cmlink/1.640", // note: redirects to http://rss.iol.io/iol/news 
      "http://www.ciol.com/article-2/", // note: returns content type HTML, not XML
      "https://www.rbi.org.in/pressreleases_rss.xml" // note: returns response code of 503, not 200
    ];
  expression<int32> $timeout: 60; // one minute
  expression<float64> $interval: 10.0 * 60.0; // ten minutes

  type

  InetType =
    float64 ingestTimestamp, 
    rstring targetURL, 
    rstring effectiveURL, 
    int32 responseCode, 
    float64 fetchTime, 
    rstring contentType, 
    blob content;

  graph


  stream<InetType> InetStream as Out = InetSource() {
    param
      URIList: $urls;
      fetchInterval: $interval;
      timeout: $timeout;
      emitTuplePerURI: true;
    output Out:
      ingestTimestamp = getTimestampInSecs(),
      targetURL = TargetURL(),
      effectiveURL = EffectiveURL(),
      responseCode = ResponseCode(),
      fetchTime = FetchTime(),
      contentType = ContentType(); }

  ( stream<InetStream> XMLInetStream ; stream<InetStream> NonXMLInetStream ) = Filter(InetStream) {
    param
    filter: responseCode==200 && findFirst(lower(contentType),"xml")>0; }
  
  () as Out1 = Custom(XMLInetStream as In) {
    logic onTuple In: {
      rstring redirected = targetURL!=effectiveURL ? " (redirected from " + targetURL + ")" : "";
      printStringLn(formatDateTimeLocal(ingestTimestamp, "%Y-%m-%d %H:%M:%S") + "  headlines from " + effectiveURL + redirected + " fetched in " + (rstring)fetchTime + " seconds:");
      list<rstring> headlines = getTitles(convertFromBlob(content));
      for (rstring headline in headlines) { printStringLn("    " + headline); }
    } }

  () as Out2 = Custom(NonXMLInetStream as In) {
    logic onTuple In: {
      appTrc( Trace.error, targetURL + " returned response code " + (rstring)responseCode + ", content type '" + contentType + "'");
    } }


  () as DebugInetStream = FileSink(InetStream) { param file: "debug.GetHeadlines.InetStream.out"; format: txt; writePunctuations: true; flush: 1u; }
  () as DebugXMLInetStream = FileSink(XMLInetStream) { param file: "debug.GetHeadlines.XMLInetStream.out"; format: txt; writePunctuations: true; flush: 1u; }
  () as DebugNonXMLInetStream = FileSink(NonXMLInetStream) { param file: "debug.GetHeadlines.NonXMLInetStream.out"; format: txt; writePunctuations: true; flush: 1u; }

}
