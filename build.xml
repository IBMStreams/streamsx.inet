<project name="streamsx.inet" default="all" basedir=".">
  <description>
    Build file for streamsx.inet project, built the toolkits and samples.
  </description>

  <property environment="env" />
  <fail message="STREAMS_INSTALL is not set">
    <condition>
      <not><isset property="env.STREAMS_INSTALL"/></not>
    </condition>
  </fail>
  <echo message="STREAMS_INSTALL : ${env.STREAMS_INSTALL}"/>

  <!-- set global properties for this build -->
  <property name="streams.install" value="${env.STREAMS_INSTALL}" />
  <property name="toolkit.string"  value="com.ibm.streamsx.inet"/>
  <property name="toolkit.dir"     location="${toolkit.string}"/>
  <property name="toolkit.test"    location="tests" />
  <property name="release.dir"     location="release" />
  <property name="release.info.file"  value="${toolkit.dir}/build.info"/>
  <property name="spl-md"  value="${streams.install}/bin/spl-make-doc" />
  <property name="spl-st"  value="${streams.install}/bin/streamtool" />

  <!-- Create the time stamp -->
  <tstamp/>

  <target name="all"
    description="Build the toolkit code, build the samples index and generate the spl documentation"
    depends="toolkit, samples, spldoc"
  />

  <target name="clean" depends="spldoc-clean,samples-clean,releaseinfo-clean"
      description="clean up toolkit code, samples code and all spldocs">
      <delete includeemptydirs="true">
          <fileset dir="${basedir}" includes="release-*/"/>
      </delete>
      <ant dir="${toolkit.dir}" target="clean"/>
  </target>

  <target name="clean-all" depends="clean"
      description="clean up toolkit code, samples code and all spldocs and test artifacts">
      <ant dir="${toolkit.test}" target="clean-all"/>
  </target>

  <target name="requirements" depends="get_name"
      description="Download required libraries." >
      <ant dir="${toolkit.dir}" target="requirements"/>
  </target>

  <target name="toolkit" depends="get_name"
      description="Build any code and index the toolkit." >
      <ant dir="${toolkit.dir}" target="all"/>
  </target>

  <target name="get_name">
    <xmlproperty file="${toolkit.dir}/info.xml" prefix="tkinfo" keepRoot="no"/>
    <echo message="Toolkit Name: ${tkinfo.identity.name}"/>
    <echo message="Toolkit Version: ${tkinfo.identity.version}"/>
  </target>

  <target name="toolkitIndexOnly" description="Index the toolkit.">
      <ant dir="${toolkit.dir}" target="cleanToolkitxml" />
      <ant dir="${toolkit.dir}" target="indextoolkit" />
  </target> 	

  <target name="spldoc" depends="get_name, samples"
    description="Create spldoc for toolkit and all samples">
    <!-- build the toolkit doc -->
    <echo message="Tookit to SPLDOC: ${toolkit.dir}"/>
    <exec executable="${spl-md}" failonerror="true">
      <arg value="--include-composite-operator-diagram"/>
      <arg value="--author"/>
      <arg value="IBMStreams Open Source Community at GitHub - https://github.com/IBMStreams/${ant.project.name}"/>
      <arg value="--doc-title"/>
      <arg value="IBMStreams ${tkinfo.identity.name} Toolkit"/>
      <arg value="--toolkit-path"/>
      <arg value="${toolkit.dir}"/>
      <arg value="--warn-no-comments"/>
      <arg value="--check-tags"/>
    </exec>
    <!-- build the sample doc for each sample-->
    <exec executable="bash" outputproperty="samples.list" failonerror="true">
        <arg value="-c"/>
        <arg value="for x in samples/*/info.xml; do echo -n ${x%/*};  echo -n : ; done"/>
    </exec>
    <echo message="All samples to SPLDOC: ${samples.list}"/>
    <exec executable="${spl-md}" failonerror="true">
      <arg value="--include-composite-operator-diagram"/>
      <arg value="--author"/>
      <arg value="IBMStreams Open Source Community at GitHub - https://github.com/IBMStreams/${ant.project.name}"/>
      <arg value="--doc-title"/>
      <arg value="IBMStreams ${tkinfo.identity.name} Samples"/>
      <arg value="--toolkit-path"/>
      <arg value="${samples.list}"/>
      <arg value="--warn-no-comments"/>
      <arg value="--check-tags"/>
      <arg value="--include-source"/>
      <arg value="--output-directory"/>
      <arg value="samples/doc/spldoc"/>
    </exec>
  </target>

  <target name="samples" depends="toolkit" description="Build the toolkit index for the samples">
    <subant target="indextoolkit" genericantfile="${basedir}/build.xml">
       <dirset dir="samples" includes="*" excludes="doc"/>
    </subant>
  </target>
  <target name="samples-clean" description="Clean up samples index and samples code">
    <subant genericantfile="${basedir}/build.xml">
       <target name="cleantoolkit"/>
       <target name="cleansample"/>
       <dirset dir="samples" includes="*" excludes="doc"/>
    </subant>
  </target>

  <target name="samples-build" depends="toolkit" description="Compile all samples">
    <subant target="buildsample" genericantfile="${basedir}/build.xml">
       <dirset dir="samples" includes="*" excludes="doc"/>
    </subant>
  </target>

  <!-- Test targets -->
  <target name="test" depends="toolkit" description="Start the (quick) test">
     <ant dir="${toolkit.dir}" target="test"/>
     <ant dir="${toolkit.test}" target="test"/>
  </target>

  <target name="test-full" depends="toolkit" description="Start the full test">
     <ant dir="${toolkit.dir}" target="test"/>
     <ant dir="${toolkit.test}" target="test-full"/>
  </target>

  <!-- Targets called on samples -->
  <target name="buildsample">
     <echo message="Sample to build: ${basedir}"/>
     <exec executable="make" failonerror="true" dir="${basedir}">
        <arg value="-f" />
        <arg value="Makefile" />
        <arg value="all" />
     </exec>
  </target>
  <target name="cleansample">
     <echo message="Sample to clean: ${basedir}"/>
     <exec executable="make" failonerror="true" dir="${basedir}">
        <arg value="-f" />
        <arg value="Makefile" />
        <arg value="clean" />
     </exec>
  </target>
  <target name="indextoolkit">
     <echo message="Tookit to index: ${basedir}"/>
     <exec executable="${streams.install}/bin/spl-make-toolkit" failonerror="true">
        <arg value="--directory"/>
        <arg value="${basedir}"/>
        <arg value="-m"/>
     </exec>
  </target>
  <target name="cleantoolkit">
    <echo message="Tookit to clean: ${basedir}"/>
    <exec executable="${streams.install}/bin/spl-make-toolkit">
      <arg value="--clean"/>
      <arg value="--directory"/>
      <arg value="${basedir}"/>
    </exec>
    <delete dir="${basedir}/output" quiet="true"/>
    <delete dir="${basedir}/doc" quiet="true"/>
  </target>

  <target name="spldoc-clean" description="clean the toolkit doc and the all samples doc">
    <delete dir="${basedir}/doc" quiet="true"/>
    <delete dir="${basedir}/samples/doc"/>
  </target>

  <!-- Targets to build releases -->
  <target name="release" description="Make a toolkit release archive - purge workspace and build toolkit from scratch" depends="clean">
    <antcall target="release-target" inheritAll="true"/>
  </target>

  <target name="release-target" depends="releaseinfo">
    <!-- prepare toolkit code and docs -->
    <antcall target="all" inheritAll="true"/>
    <antcall target="samples-clean" inheritAll="true"/> <!-- remove toolkit index from samples -->
    <!-- get os type string -->
    <property name="osVersion" value="${os.version}"/>
    <condition property="osPlat" value="el7">
      <contains string="${osVersion}" substring="el7" casesensitive="false"/>
    </condition>
    <condition property="osPlat" value="el6">
      <contains string="${osVersion}" substring="el6" casesensitive="false"/>
    </condition>
    <!-- Extract the git commit hash -->
    <exec executable="git" outputproperty="commithash.short">
        <arg value="rev-parse"/>
        <arg value="--short"/>
        <arg value="HEAD"/>
    </exec>
    <!-- create release bundle -->
    <mkdir dir="${release.dir}" />
    <property name="releasefilename" value="${release.dir}/streamsx.inet.toolkit-${tkinfo.identity.version}-${osPlat}-${os.arch}-${commithash.short}-${DSTAMP}-${TSTAMP}.tgz"/>
    <echo message="Create release archive ${releasefilename}"/>
    <tar compression="gzip" longfile="gnu"
          destfile="${releasefilename}"
          basedir="${basedir}"
          includes="${toolkit.string}/** samples/** doc/** README.md LICENSE.md"
          excludes="**/pom.xml **/.gitignore **/.gitkeep ${toolkit.string}/.project ${toolkit.string}/.settings/** ${toolkit.string}/.classpath ${toolkit.string}/icons/ ${toolkit.string}/impl/java/ ${toolkit.string}/impl/cpp/ ${toolkit.string}/impl/src/ ${toolkit.string}/impl/Makefile ${toolkit.string}/build.xml "
    />
    <checksum file="${releasefilename}"/>
    <checksum algorithm="sha1" file="${releasefilename}"/>
  </target>

  <!-- Extract the git commit hash and make release info -->
  <target name="releaseinfo" depends="get_name,clean-ignored" description="Make the release information file">
    <echo message="create info-file ${release.info.file}"/>
    <exec executable="git" outputproperty="commithash.long" failonerror="true">
      <arg value="rev-parse" />
      <arg value="HEAD" />
    </exec>
    <exec executable="bash" outputproperty="streamsversion" failonerror="true">
      <arg value="-c"/>
      <arg value="${spl-st} version | grep Version="/>
    </exec>
    <exec executable="bash" failonerror="true">
      <arg value="-c" />
      <arg value="echo -e &quot;commit_hash=${commithash.long}\nos=${os.version}\nStreams_${streamsversion}&quot; > ${release.info.file}"/>
    </exec>
    <echo message="Generated release info file ${release.info.file}"/>
    <exec executable="bash" failonerror="true">
      <arg value="-c" />
      <arg value="cat ${release.info.file}" />
    </exec>
  </target>

  <target name="releaseinfo-clean" description="remove the release information file">
    <delete file="${release.info.file}"/>
  </target>

  <!--- Targets to purge the workspace before a release archive is produced -->
  <target name="clean-ignored" depends="warn-unclean" description="Remove all git-ignored files and warn if workspace has uncommited changes"/>

  <target name="warn-unclean" depends="check-unclean" if="has.uncommited">
    <echo>!Your workspace is not clean!</echo>
    <echo>Commit all changes before you produce a release</echo>
    <echo>commitstatus:</echo>
    <echo>${commitstatus}</echo>
    <input>Press Return key to continue or ^C to exit...</input>
  </target>

  <target name="check-unclean" depends="warn-untracked">
    <exec executable="git" outputproperty="commitstatus">
      <arg value="status" />
      <arg value="--porcelain" />
    </exec>
    <!-- set condition true if there are any non-whitespaces -->
    <condition property="has.uncommited">
      <matches string="${commitstatus}" pattern="\S" multiline="true"/>
    </condition>
    <echo message="has.uncommited=${has.uncommited}"/>
  </target>

  <target name="warn-untracked" depends="check-untracked" if="has.untracked">
    <echo>!!! DANGER: Git-ignored files to be removed from your workspace:</echo>
    <echo>${untracked}</echo>
    <input>Press Return key to continue or ^C to exit...</input>
    <exec executable="git" failonerror="true">
      <arg value="clean"/>
      <arg value="--force"/>
      <arg value="-d"/>
      <arg value="-x"/>
      <arg value="--"/>
      <arg value="${toolkit.string}/"/>
      <arg value="samples/"/>
      <arg value="README.md"/>
      <arg value="doc/"/>
    </exec>
  </target>

  <target name="check-untracked">
    <exec executable="git" outputproperty="untracked" failonerror="true">
      <arg value="clean"/>
      <arg value="--dry-run"/>
      <arg value="-d"/>
      <arg value="-x"/>
      <arg value="--"/>
      <arg value="${toolkit.string}/"/>
      <arg value="samples/"/>
      <arg value="README.md"/>
      <arg value="doc/"/>
    </exec>
    <!-- set condition true if there are any non-whitespaces -->
    <condition property="has.untracked">
      <matches string="${untracked}" pattern="\S" multiline="true"/>
    </condition>
    <echo message="has.untracked=${has.untracked}"/>
  </target>

</project>
