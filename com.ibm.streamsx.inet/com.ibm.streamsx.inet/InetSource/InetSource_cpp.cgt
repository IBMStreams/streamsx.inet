<%
# Copyright (C) 2010,2012-2014, International Business Machines Corporation. 
# All Rights Reserved.
%>
<%SPL::CodeGen::implementationPrologue($model);%>

<%
  my $ccContext = $model->getContext()->getOptionalContext("ConsistentRegion");
  if (defined $ccContext) {
    SPL::CodeGen::exitln("The following operator is not supported in a consistent region: InetSource.");
  }

  my $oport = $model->getOutputPortAt(0);
  my $oportAttr = $oport->getAttributeAt(0);
  my $oportSPLType = $oportAttr->getSPLType();

  # Check the attribute type in the output tuple to make sure it is either list<string> or string
  if($oportSPLType ne "rstring" && $oportSPLType ne "list<rstring>")
  {
    SPL::CodeGen::exit("Output attribute '{$oportSPLType}' must be of type rstring or list<rstring>. It was declared as type '{$oportSPLType}'.");
  }

  # we handle the list<rstring> output type differently than the rstring output type
  my $outputTypeIsList = 0;

  # need to get the output attribute name so we can set it later
  my $oportAttrName = $oportAttr->getName();

  # create a variable to hold the parameters as I get them
  my $parameter = "";
  my $initDelay = $model->getParameterByName("initDelay");
  my $incrementalFetch = $model->getParameterByName("incrementalFetch");
  my $doNotStreamInitialFetch = $model->getParameterByName("doNotStreamInitialFetch");
  my $unconditionalFetch = $model->getParameterByName("unconditionalFetch");
  my $emitTuplePerFetch = $model->getParameterByName("emitTuplePerFetch");
  my $emitTuplePerURI = $model->getParameterByName("emitTuplePerURI");
  my $emitTuplePerRecordCount = $model->getParameterByName("emitTuplePerRecordCount");

  # list-based attributes in output tuple
  if((substr($oportSPLType, 0, 4)) eq "list")
  {
    $outputTypeIsList = 1;
    if(!($emitTuplePerFetch) && !($emitTuplePerURI) && !($emitTuplePerRecordCount))
    {
      $emitTuplePerFetch = 1;
    }
    else
    {
      if($emitTuplePerFetch)
      {
        $emitTuplePerFetch = ($emitTuplePerFetch->getValueAt(0)->getSPLExpression() eq 'true')?1:0;
      }
      if($emitTuplePerURI)
      {
        $emitTuplePerURI = ($emitTuplePerURI->getValueAt(0)->getSPLExpression() eq 'true')?1:0;
      }
    }
  }
  else
  {
    my $value = $emitTuplePerRecordCount ? $emitTuplePerRecordCount->getValueAt(0)->getSPLExpression() : 1;
    # scalar attributes in output tuple
    if(($emitTuplePerFetch) || ($emitTuplePerURI))
    {
      SPL::CodeGen::exit("The emitTuplePerFetch and emitTuplePerURI parameters are valid for list-based attributes only.  The attribute was declared as type '{$oportSPLType}'.");
    }
    elsif($value > 1)
    {
      SPL::CodeGen::exit("Values of the emitTuplePerRecordCount parameter greater than one are valid for list-based attributes only.  The declared value was '{$value}'.");
    }
  }

  if($initDelay)
  {
    $initDelay = $initDelay->getValueAt(0)->getCppExpression();
  }
  if($incrementalFetch)
  {
    $incrementalFetch = $incrementalFetch->getValueAt(0)->getCppExpression();
  }
  if($doNotStreamInitialFetch)
  {
    $doNotStreamInitialFetch = ($doNotStreamInitialFetch->getValueAt(0)->getSPLExpression() eq 'true')?1:0;
  }
  if($unconditionalFetch)
  {
    $unconditionalFetch = $unconditionalFetch->getValueAt(0)->getCppExpression();
  }
%>

#include <iostream>
#include <string>
#include <sstream>
#include <cassert>
#include <cerrno>
#include <fstream>
#include <iomanip>
#include <getopt.h>
#include <sys/socket.h>
#include <netdb.h>
using namespace std;

#include <streams_boost/algorithm/string.hpp>
using namespace streams_boost;


#include <limits.h>
#include <stdlib.h>

@include "InetRetrieverCpp.cgt";
@include "URIHelperCpp.cgt";


MY_OPERATOR::MY_OPERATOR()
  : MY_BASE_OPERATOR(), 
    relFileProtocol("file:///"),
    absFileProtocol("file:////"),
    retrievers_(),
    retCodeCounts_(),
    uris_(<%=(($parameter = $model->getParameterByName("URIList"))?SPL::CodeGen::getParameterCppInitializer($parameter):"")%>), 
    inputLinesPerRecord_(<%=(($parameter = $model->getParameterByName("inputLinesPerRecord"))?SPL::CodeGen::getParameterCppInitializer($parameter):1)%>), 
    intraRecordPadValue_(<%=(($parameter = $model->getParameterByName("intraRecordPadValue"))?SPL::CodeGen::getParameterCppInitializer($parameter):"\" \"")%>), 
    fetchInterval_(<%=(($parameter = $model->getParameterByName("fetchInterval"))?SPL::CodeGen::getParameterCppInitializer($parameter):600.0)%>), 
    punctPerFetch_(<%=(($parameter = $model->getParameterByName("punctPerFetch"))?SPL::CodeGen::getParameterCppInitializer($parameter):'false')%>), 
<% if($outputTypeIsList) { %>
    emitTuplePerRecordCount_(<%=($emitTuplePerRecordCount?SPL::CodeGen::getParameterCppInitializer($emitTuplePerRecordCount):0),%>),
<% } else { %>
    emitTuplePerRecordCount_(1),
<% } %>
   dynamicURL_(<%=($model->getParameterByName("URIList")->getValueAt(0)->hasSideEffects()?"true":"false")%>)
{
  relFileProtocol = string("file:///");
  absFileProtocol = string("file:////");

  for(int i=0; i<uris_.getSize(); ++i)
  {
    string iURI = checkURI(uris_[i]);
    
    SPLAPPTRC(L_DEBUG, "Using " << iURI << "' as the input URI...","InetSource");

      InetRetriever* retriever = new InetRetriever(iURI);
<% if($incrementalFetch) { %>
      retriever->incrementalFetch(<%=$incrementalFetch%>);
<% } %>
<% if($unconditionalFetch) { %>
      retriever->ignoreLastModTime(<%=$unconditionalFetch%>);
<% } %>
      
      std::pair<int, uint32_t> retcodeCount (0, 0);
      retrievers_.push_back(retriever);
      retCodeCounts_.push_back(retcodeCount);
  }
}

std::string MY_OPERATOR::checkURI(std::string iURI) {
    URIHelper uri;
    try
    {
      // Ensure that the URI is correctly formatted
      uri.init(iURI);
    }
    catch(DistilleryException& e)
    // Malformed input URI -- issue message and shut down the PE
    {
      SPL::rstring msg = INET_MALFORMED_URI(iURI);
      SPLAPPLOG(L_ERROR, msg, "InetSource");
      SPL::Functions::Utility::shutdownPE();
    }
    if((iURI.compare(0, 8, relFileProtocol) == 0) && (iURI.compare(0, 9, absFileProtocol) != 0))
    // The URI was declared as a relative path/filename (relative to the PE's data directory).
    // Compute the absolute path/filename and assign it back to iURI. 
    {
      string iFileName;
      iFileName.assign(uri.getPath());
      trim(iFileName);

      // get the real path (i.e. resolve any symlinks to actual filename)
      char* rp = new char[PATH_MAX+1];
      memset(rp, 0x00, PATH_MAX+1);

      string rn;
      if(realpath(iFileName.c_str(), rp))
      {
        rn = string(rp);
      }
      delete [] rp;

      string inputFileName;
      if(iFileName == rn)
      {
        inputFileName = rn;
      }
      else
      {
        inputFileName.append(getPE().getDataDirectory());
        inputFileName.append("/").append(iFileName);
      }

      iURI = string(relFileProtocol);
      iURI.append(inputFileName);
    }
    return iURI;
}

MY_OPERATOR::~MY_OPERATOR() 
{
  for(std::size_t i = 0; i < retrievers_.size(); i++)
  {
    InetRetriever* retriever = retrievers_.at(i);
    delete retriever;
  }
}

void MY_OPERATOR::allPortsReady() 
{
  createThreads(1); // for now, single-threaded only
}
 
void MY_OPERATOR::prepareToShutdown() 
{
  SPLAPPTRC(L_DEBUG, "Shutdown Request event received by PE " << getContext().getName(), "InetSource");
}

void MY_OPERATOR::process(uint32_t idx)
{
  SPLAPPTRC(L_DEBUG, "Processing...", "InetSource");

  OPort0Type tuple;
  string record;
  istringstream retrievalBuffer;
  int recordCounter = 0;
<% if($doNotStreamInitialFetch) { %>
  bool initialFetch = true;
<% } %>

<% if($outputTypeIsList) { %>
  // internal buffer for keeping list output
  SPL::list<SPL::rstring> buffer;
<% } %>
<% if($initDelay) { %>
  // initial delay
  getPE().blockUntilShutdownRequest(<%=$initDelay%>);
<% } %>

  while(!getPE().getShutdownRequested())
  {
    if (dynamicURL_) {
        // There are <%=$model->getParameterByName("URIList")->getNumberOfValues()%> values for this parameter.
        SPL::list<SPL::rstring> newURI = <%=($model->getParameterByName("URIList")->getValueAt(0)->getCppExpression())%>;
        
        // Update the URL for the next fetch.
        for (std::size_t i = 0; i < retrievers_.size() ; i++)  {
            if (retrievers_.at(i)->updateURL(checkURI(newURI.at(i)))) {
             SPLAPPTRC(L_INFO, "URL " << i << " updated to " << retrievers_.at(i)->targetURL(), "InetSource");
            }
            else {
                SPLAPPTRC(L_DEBUG,"URL " << i << " re-evaluated, but is unchanged ", "InetSource");
            }
        }

    }
    // now fetch.
    for(std::size_t i = 0; i < retrievers_.size() && !getPE().getShutdownRequested(); i++)
    {
      InetRetriever* retriever = retrievers_.at(i);

      // Fetch file contents from this URI and place in an istringstream retrieval buffer, to enable parsing into lines
      try
      {
        retrievalBuffer.clear(); // also clears eof bit
        string content = retriever->fetch();
        retrievalBuffer.str(content);
      }
      catch(CURLcode rc)
      {
        std::pair<int,uint32_t> & retcodeCount = retCodeCounts_.at(i);
        // Keep track of how many times in a row a given retriever has issued the same return code
        // This avoids filling up the log with repetitive messages.
        if (retcodeCount.first == rc)
        {
          (retcodeCount.second)++;
        }
        else
        {
          retcodeCount.first = rc;
          retcodeCount.second = 1;
        }
        
        SPL::rstring msg;
        if (retcodeCount.second < 10)
        {
          msg = INET_NONZERO_LIBCURL_RC(retriever->targetURL(), rc, string(curl_easy_strerror(rc)));
          SPLAPPLOG(L_WARN, msg, "InetSource");
        }
        else if (retCodeCounts_.at(i).second % 10 == 0) {
          msg = INET_NONZERO_LIBCURL_RC_REPEATED(retriever->targetURL(), rc, string(curl_easy_strerror(rc)), retcodeCount.second);
          SPLAPPLOG(L_WARN, msg, "InetSource");
        }
        continue;
      }
<% if($doNotStreamInitialFetch) { %>
      // if we don't want the initial fetch and we are on that fetch, skip the output
      if(!initialFetch)
      {
<% } %>
        /*
         * Split retrieval buffer into separate "input records", each record containing
         * "inputlinesPerRecord" lines from the original file, separated by the "intraRecordPadValue"
         * value (default pad value is a single blank char)
         */
        
        // Start of loop here, one loop cycle per input record, until retrieval buffer is exhausted
        getline(retrievalBuffer, record);
        if(record.size() > 0 || !retrievalBuffer.eof())
        {
          do
          {
            if(inputLinesPerRecord_ > 1)
            {
              /*
               * Here, the user asked for multiple lines per record, so append the contents of the additional
               * lines, interspersing a pad value before each append.  (Note, a value less than 1 means
               * "put all lines in a single record.")
               */
              string line;
              for(int lc=1; lc<inputLinesPerRecord_ && !retrievalBuffer.eof(); ++lc)
              {
                getline(retrievalBuffer, line);
                if(line.size() > 0 && !retrievalBuffer.eof())
                {
                  if(record.size() > 0)  // append the pad value if and only if the previous line had content
                  {
                    record.append(intraRecordPadValue_);
                  }
                  record.append(line);
                }
              }
            }
            else if(inputLinesPerRecord_ == 0)
            {
              string line;
              while(!retrievalBuffer.eof())
              {
                getline(retrievalBuffer, line);
                if(line.size() > 0)
                {
                  if(record.size() > 0)  // append the pad value if and only if the previous line had content
                  {
                    record.append(intraRecordPadValue_);
                  }
                  record.append(line);
                }
              }
            }
    
            // Now that the record has been formed, do the following:
    
            /*
             * (** Note, additional function planned here to parse the record into multiple pieces, and assign
             * each piece to an attribute of the output stream tuple. **)
             */
    
<% if($outputTypeIsList) { %>
            /*
             * Here, the output attribute is a list<rstring>, so append the record to the end of
             * the internal buffer we're building.  (Don't submit it yet though.)
             * If the resulting attribute would exceed 2^31-1 in length, fragment it into
             * multiple list members each 2^31-1 or less in length.  (This is to avoid
             * the SPL limit of 2^31 - 1 on string size in tuples.)
             */
            while(true)
            {
              string limitStr = record.substr(0, 2147483647); // gets entire record if size < 2^31-1
              buffer.add(limitStr);
              if(limitStr.size() < record.size()) // did fragmentation occur?
              {
                record = record.substr(limitStr.size());
              }
              else break;// when there is no fragmentation, we are done
            }
            ++recordCounter;
  
            if(emitTuplePerRecordCount_ > 0)
            {
              /*
               * Here, emitTuplePerRecordCount was requested, so test to see if the record count is
               * large enough for us to emit a tuple.  If it is, then assign the internal list
               * buffer(s) to its(their) corresponding tuple attribute(s) and then submit the tuple.
               * Clear the internal list buffer(s) and reset the tuple counter.
               */
              if(recordCounter >= emitTuplePerRecordCount_ && buffer.size() > 0)
              {
                tuple.clear();
                tuple.set_<%=$oportAttrName%>(buffer);
                SPLAPPTRC(L_DEBUG, "Submitting output tuple " << tuple, "InetSource");
                submit(tuple, 0);
                buffer.clear();
                recordCounter = 0;
              }
            }
<% } else { %>
            /*
             * Here, the output attribute is a rstring, so assign the record to the rstring tuple
             * attribute and submit the tuple.  If the resulting attribute would exceed 2^31-1 in
             * length, fragment it into multiple tuples each 2^31-1 or less in length.  (This is to avoid
             * the SPL limit of (2^31 - 1) on string size in tuples.)
             */
            while(true)
            {
              tuple.clear();
              string limitStr = record.substr(0, 2147483647); // gets entire record if size < 2^31-1
              tuple.set_<%=$oportAttrName%>(limitStr);
              SPLAPPTRC(L_DEBUG, "Submitting output tuple " << tuple, "InetSource");
              submit(tuple, 0);
              if(limitStr.size() < record.size()) // did fragmentation occur?
              {
                record = record.substr(limitStr.size());
              }
              else break; // when there is no fragmentation, we are done
            }
<% } %>
            if(!retrievalBuffer.eof()) getline(retrievalBuffer, record);
          } while(!retrievalBuffer.eof());
        } // end of if(record.size() > 0 || !retrievalBuffer.eof())
<% if($outputTypeIsList && $emitTuplePerURI) { %>
        /*
         * Here, emitTuplePerURI was requested, so flush the internal list buffer(s) into its(their)
         * corresponding tuple attribute(s) and then submit the tuple if nonempty.
         */
        if(buffer.size() > 0)
        {
          tuple.clear();
          tuple.set_<%=$oportAttrName%>(buffer);
          SPLAPPTRC(L_DEBUG, "Submitting output tuple " << tuple, "InetSource");
          submit(tuple, 0);
          buffer.clear();
          recordCounter = 0;
        } // end buffer.size()>0 'test for empty buffer' block
<% } %>
<% if($doNotStreamInitialFetch) { %>
      }
<% } %>
    } // end -- loop over all URIs in the URIList
<% if($doNotStreamInitialFetch) { %>
    // if we don't want the initial fetch and we are on that fetch, skip the output
    if(!initialFetch)
    {
<% } %>
<% if($outputTypeIsList && $emitTuplePerFetch) { %>
      /*
       * emitTuplePerFetch was requested -- so flush the internal list buffer(s) into its(their)
       * corresponding tuple attribute(s) and then submit the tuple.
       */
      if(buffer.size() > 0)
      {
        tuple.clear();
        tuple.set_<%=$oportAttrName%>(buffer);
        SPLAPPTRC(L_DEBUG, "Submitting output tuple " << tuple, "InetSource");
        submit(tuple, 0);
        buffer.clear();
        recordCounter = 0;
      }
<% } %>
    
    if(punctPerFetch_) {
      // punctPerFetch was requested -- so emit a punctuation here
      submit(Punctuation::WindowMarker, 0);
    }
<% if($doNotStreamInitialFetch) { %>
    }
    else
    {
      // It was the initial fetch...so clear the flag for subsequent fetches
      initialFetch = false;
    }
<% } %>
    // Now pause until it is time to perform the next fetch
    getPE().blockUntilShutdownRequest(fetchInterval_);
  }

  SPLAPPTRC(L_DEBUG, "Processing complete", "InetSource");
}

<%SPL::CodeGen::implementationEpilogue($model);%>

