/*
*******************************************************************************
* Copyright (C) 2014, International Business Machines Corporation. 
* All Rights Reserved. *
*******************************************************************************
*/

namespace com.ibm.streamsx.inet.sample;

use com.ibm.streamsx.inet::InetSource;

/**
 * This function helps us create URLs that are different every fetch.  
 * As used in the application, it usually returns two KJFKs and then
 * one KNYCs.  The 10 in the function below is related to the 
 * 10 in the fetchInterval in the GetWeatherDynamic composite. 
 * 
 */ 
stateful rstring getLocation() {
    int64 seconds = getSeconds(getTimestamp());
    if ((seconds/(int64)10) % (int64)3 != (int64)0) {
        return "KJFK";
    }
    else {
        return "KNYC";
    }
}

stateful list<rstring> getUrlList() {

   int64 seconds = getSeconds(getTimestamp());
   appTrc(Trace.error,"Seconds is "+(rstring)((int32)seconds/10 % 5));
    if ((seconds/(int64)10) % (int64)5 == (int64)0)  {
    appTrc(Trace.error, "Empty list.");
        return (list<rstring>)[];
	}
    else if ((seconds/(int64)10) % (int64)5 == (int64)1) {
    appTrc(Trace.error, "KJFK.");
    return ["http://w1.weather.gov/data/METAR/KJFK.1.txt"];
    }
    else if ((seconds/(int64)10) % (int64)5 == (int64)2) {
        appTrc(Trace.error, "KJFK, NYC");
    return ["http://w1.weather.gov/data/METAR/KJFK.1.txt",
    "http://w1.weather.gov/data/METAR/KNYC.1.txt"];
    }
    else if ((seconds/(int64)10) % (int64)5 == (int64)3) {
            appTrc(Trace.error, "NYC,KJFK");
return ["http://w1.weather.gov/data/METAR/KNYC.1.txt",
    "http://w1.weather.gov/data/METAR/KJFK.1.txt"];
}
    else  {
                appTrc(Trace.error, "NYC");
return ["http://w1.weather.gov/data/METAR/KNYC.1.txt"];
}
}

/**
 * Demonstrates the use of re-evaluated URLS with the Inetsource operator.
 * The URL list in this case is a single URL, but it contains a call to 
 * getLocation().  getLocation is a a stateful function, so depending on when 
 * it is called, it gives different results.
 *
 * The URL is evaluated before every fetch. If the URL has changed, information
 * about the last modification time is discarded.  
 */
 
composite GetWeatherDynamic
{
  graph
    stream<list<rstring> result> Result = InetSource()
    {
      param URIList : getUrlList();

            incrementalFetch : true;
            inputLinesPerRecord : 5u;
            fetchInterval : 10.0;
            emitTuplePerURI : true;
    } 

    () as Writer = Custom(Result)
    {
      logic
        onTuple Result:
        {
          printString("result: " + result[0] + "\n");
        } 
    }
  //  config tracing: debug;
}
