namespace sample;

use com.ibm.streamsx.inet.http::HTTPRequest;

composite Main {
	param
		expression<list<rstring>>              $url    : (list<rstring>)             getSubmissionTimeValue(
			"url", '["https://httpbin.org/get","https://httpbin.org/gzip","https://httpbin.org/redirect/3","https://httpbin.org/post","https://httpbin.org/put", "https://httpbin.org/delete", "https://httpbin.org/head"]'
		);
		expression<list<rstring>>              $method : (list<rstring>)             getSubmissionTimeValue(
			"method", '["GET","GET","GET","POST","PUT","DELETE","HEAD"]'
		);
		expression<list<rstring>>              $data   : (list<rstring>)             getSubmissionTimeValue(
			"data", '["aaaa","bbbbb","ccccc","ddddd","eeeee","fffff",""]'
		);
		expression<list<rstring>>              $contt   : (list<rstring>)            getSubmissionTimeValue(
			"contt", '["aaaa","bbbbb","ccccc","application/x-www-form-urlencoded","application/x-www-form-urlencoded","fffff",""]'
		);
		expression<int32>                      $iterations: (int32)                  getSubmissionTimeValue("iterations", "7");
		expression<float64>                    $period    : (float64)                getSubmissionTimeValue("period", "0.1");
	graph
		stream<uint64 id, rstring url, rstring method, rstring data, rstring contentType> Trigger as O = Beacon() {
			param 
				iterations : $iterations;
				period     : $period;
			output O:
				id = IterationCount(),
				url = $url[(int32)IterationCount() % size($url)],
				method = $method[(int32)IterationCount() % size($method)],
				data = $data[(int32)IterationCount() % size($data)],
				contentType = $contt[(int32)IterationCount() % size($contt)];
		}
		
		stream<uint64 id, rstring method, rstring url, rstring status, int32 stat, rstring contentEncoding, rstring contentType, list<rstring> responseHeader, rstring respData> Response as O = HTTPRequest(Trigger as I) {
		//() as O = HTTPRequest(Trigger as I) {
			param
				url: url;
				//fixedUrl: "ddddd";
				//fixedMethod : NONE;
				method : method;
				outputBody : "respData";
				outputStatus : "status";
				outputStatusCode : "stat";
				outputContentEncoding : "contentEncoding";
				outputContentType : "contentType";
				outputHeader : "responseHeader";
				extraHeaders : "Myheader: aaaa", "Myheader2: bbb";
				//fixedContentType : "application/x-www-form-urlencoded";
				contentType : contentType;
				sslAcceptAllCertificates : true;
				//requestAttributes : "id", "url", "data";
				//requestAttributes : "url", "data";
				//requestAttributes : "";
				//method : url;
				//vmArg: "-Djavax.net.debug=ssl:handshake", "-Dcom.ibm.jsse2.overrideDefaultTLS=true";
				//vmArg: "-Djavax.net.debug=ssl:handshake", "-Dcom.ibm.jsse2.overrideDefaultTLS=true";
		}
		
		() as Printer = Custom(Response as I) {
			logic
				onTuple I: {
					printStringLn("******************************************");
					printStringLn("id="+(rstring)id+"   method="+method+"     url="+url);
					printStringLn("status="+status+"    code="+(rstring)stat);
					printStringLn("contentEncoding="+contentEncoding+"       contentType="+contentType);
					printStringLn("ResponseHeader");
					printStringLn((rstring)responseHeader);
					printStringLn("body");
					printStringLn(respData);
				}
				onPunct I: println(currentPunct());
		}
	
	config
		restartable : false;
}
